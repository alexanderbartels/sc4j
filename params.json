{"name":"sc4j","tagline":"simple configuration library 4 java","body":"What is sc4j [![Build Status](https://drone.io/github.com/alexanderbartels/sc4j/status.png)](https://drone.io/github.com/alexanderbartels/sc4j/latest)\r\n============\r\n\r\nsc4j provides an easy and fast possibility to read properties (e.g. from a properties file).\r\nThe default implementation reads the configuration from a properties file, \r\nbut it is very easy to swap the implementation against your own one.\r\nFor this purpose, only the 'ConfigurationInterface' provider must be implemented.\r\n\r\nSimple Example\r\n==============\r\n\r\nIf you would like to read the following property file:\r\n\r\n````\r\n#my configuration file\r\n\r\n# this is the mail host to send the mails\r\nemail.host=smtp@bartels.de\r\n\r\n# the port to from the mail host\r\nemail.port=20\r\n\r\n#authentication \r\nemail.account.user.name=bartels\r\nemail.account.user.pwd=bartels\r\n```\r\n\t\r\nNormally we would implement a class to wrap the access to the property file,\r\nLike the following example:\r\n\r\n```java\r\n\r\npublic class MyConfiguration {\r\n   public static final String EMAIL_HOST = \"email.host\";\r\n   public static final String EMAIL_PORT = \"email.port\";\r\n   public static final String EMAIL_ACCOUNT_USER_NAME = \"email.account.user.name\";\r\n   public static final String EAMIL_ACCOUNT_USER_PWD  = \"email.account.user.pwd\";\r\n   \r\n   public static final String EMAIL_HOST_DEFAULT_VALUE = \"foobar@bartels.de\";\r\n   \r\n   private Properties properties;\r\n   \r\n   public MyConfiguration(final String propertyFilePath) {\r\n        // some magic to load the file and the properties;\r\n   }\r\n   \r\n   public String getEmailHost() {\r\n      String host = properties.get(EMAIL_HOST);\r\n      return host == null ? EMAIL_HOST_DEFAULT_VALUE : host;\r\n   }\r\n   \r\n   public int getEmailPort() {\r\n      String  sPort = properties.get(EMAIL_PORT);\r\n      if(sPort != null) {\r\n         int port = Integer.parseInt(sPort);\r\n         return port;\r\n      }\r\n      throw new IllegalStateException(\"invalid argument\");\r\n   }\r\n   \r\n   // getter methods for the other properties\r\n   [...]\r\n}\r\n\r\n```\r\n\r\nand then we would use the class like this:\r\n\r\n```java\r\n  [...]\r\n  \r\n  public void configureMailSystem() {\r\n     // load the properties\r\n     MyConfiguration config = new MyConfiguration(\"MyPropertiesFile.properties\");  \r\n     \r\n     // do something with the loaded properties\r\n     config.getEmailHost();\r\n  }\r\n```\r\n\r\nWith the sc4j lib we only need to define an interface with the properties we would like to read:\r\n\r\n```java\r\n\r\n@PropertyFile(\"MyPropertiesFile.properties\")\r\npublic interface MyConfiguration {\r\n\r\n   /**\r\n   *\r\n   * @return returns the email.host property if the property is null the default value will returned\r\n   */\r\n   @DefaultValue(\"foobar@bartels.de\")\r\n   String emailHost();\r\n\r\n   int emailPort();\r\n   \r\n   /**\r\n   * with the PropertyPath annotions you're able to specify a different property key to read the property\r\n   * @return returns the email.account.user.name property\r\n   */\r\n   @PropertyPath(\"email.account.user.name\")\r\n   String userName();\r\n\r\n   @PropertyPath(\"email.account.user.pwd\")\r\n   String userPwd();\r\n}\r\n\r\n```\r\n\r\nhow to use the interface:\r\n\r\n```java\r\n   public class MyFancyClass {\r\n      // load the properties\r\n      private static final MyConfiguration CONFIG = ConfigurationFactory.create(MyConfiguration.class);\r\n   \r\n      public void configureMailSystem() {\r\n         // do something with the loaded properties\r\n         CONFIG.emailHost();\r\n      }\r\n   }\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}